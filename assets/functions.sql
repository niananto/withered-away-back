CREATE OR REPLACE FUNCTION REQ_APPOINTMENT_AND_DEDUCE_FEE(P_ID IN NUMBER, D_ID IN NUMBER, A_DATE IN DATE, A_REASON IN VARCHAR2) RETURN VARCHAR2 IS
	C_FEE NUMBER;
	C_BALANCE NUMBER;
	C_BANKNO VARCHAR2(50);
	C_TDETAILS VARCHAR2(1000);
	C_TTYPE VARCHAR2(50);
	C_INOUT VARCHAR2(10);
	C_DNAME VARCHAR2(50);
	MSG VARCHAR2(100);
BEGIN
	SELECT FEE INTO C_FEE FROM DOCTOR WHERE ID=D_ID;
	SELECT BALANCE INTO C_BALANCE FROM ACCOUNT WHERE PEOPLE_ID=P_ID;
	IF (C_BALANCE < C_FEE) THEN
		MSG := 'NOT ENOUGH BALANCE';
	ELSE
		INSERT INTO APPOINTMENT (APPOINTED_DATE, PEOPLE_ID, DOCTOR_ID, ACCEPTED, REASON)
		VALUES (A_DATE, P_ID, D_ID, 'F', A_REASON);
		
		C_BALANCE := C_BALANCE - C_FEE;
		UPDATE ACCOUNT SET BALANCE=C_BALANCE WHERE PEOPLE_ID=P_ID;
		
		SELECT NAME INTO C_DNAME FROM DOCTOR WHERE ID=D_ID;
		SELECT BANK_ACCOUNT_NO INTO C_BANKNO FROM ACCOUNT WHERE PEOPLE_ID=P_ID;
		C_TDETAILS := 'Requested an Appointment with : ' || C_DNAME;
		C_TTYPE := 'REQUESTING APPOINTMENT';
		C_INOUT := 'OUT';
		
		INSERT INTO TRANSACTIONS (BANK_ACCOUNT_NO, PEOPLE_ID, TRX_TYPE, DETAILS, TRX_DATE, AMOUNT, IN_OUT)
		VALUES (C_BANKNO, P_ID, C_TTYPE, C_TDETAILS, SYSDATE, C_FEE, C_INOUT);
		
		MSG := 'DONE';
	END IF;
	RETURN MSG;
EXCEPTION
	WHEN OTHERS THEN
		RETURN 'ERROR';
END;
/

--------------------------------------------------

CREATE OR REPLACE FUNCTION ISSUE_BOOK_AND_DEDUCE_COST(P_ID IN NUMBER, B_ID IN NUMBER, I_DATE IN DATE, R_DATE IN DATE) RETURN VARCHAR2 IS
	C_DAYS NUMBER;
	C_COST NUMBER;
	C_BALANCE NUMBER;
	C_BNAME VARCHAR2(100);
	C_BANKNO VARCHAR2(50);
	C_TDETAILS VARCHAR2(1000);
	C_TTYPE VARCHAR2(50);
	C_INOUT VARCHAR2(10);
	MSG VARCHAR2(100);
BEGIN
	C_DAYS := R_DATE - I_DATE;
	C_COST := C_DAYS*10;
	SELECT BALANCE INTO C_BALANCE FROM ACCOUNT WHERE PEOPLE_ID=P_ID;
	IF (C_BALANCE < C_COST) THEN
		MSG := 'NOT ENOUGH BALANCE';
	ELSE
		INSERT INTO BOOK_ISSUE (BOOK_ID, PEOPLE_ID, ISSUE_DATE, RETURN_DATE, COST)
		VALUES (B_ID, P_ID, I_DATE, R_DATE, C_COST);
	
		C_BALANCE := C_BALANCE - C_COST;
		UPDATE ACCOUNT SET BALANCE=C_BALANCE WHERE PEOPLE_ID=P_ID;
		
		SELECT NAME INTO C_BNAME FROM BOOKS WHERE ID=B_ID;
		SELECT BANK_ACCOUNT_NO INTO C_BANKNO FROM ACCOUNT WHERE PEOPLE_ID=P_ID;
		C_TDETAILS := 'Issued a book : ' || C_BNAME;
		C_TTYPE := 'ISSUE BOOK';
		C_INOUT := 'OUT';
		
		INSERT INTO TRANSACTIONS (BANK_ACCOUNT_NO, PEOPLE_ID, TRX_TYPE, DETAILS, TRX_DATE, AMOUNT, IN_OUT)
		VALUES (C_BANKNO, P_ID, C_TTYPE, C_TDETAILS, SYSDATE, C_COST, C_INOUT);
		
		MSG := 'DONE';
	END IF;
	RETURN MSG;
EXCEPTION
	WHEN OTHERS THEN
		RETURN 'ERROR';
END;
/